#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Sun Aug 21 09:58:33 CEST 2022
# Last Modified: Mon Aug 22 10:03:49 CEST 2022
# Filename:      humdrum-polish-scores/bin/makeReadme
# Syntax:        perl 5
#
# Description:   Create readme for repository.
#

use strict;

my @filelist = glob("*/kern/*.krn");
my $totalfiles = @filelist;
my $commafiles = commify($totalfiles);

my %notecounts = getNoteCounts();
my $totalnotes = getTotalNotes();
my $commanotes = commify($totalnotes);

my %composerList = getComposerList();

my @data = <DATA>;
my $output = join("", @data);
my $siglaInfo = buildLibraryTable();
my $composerInfo = buildComposerTable();


# Fill in template markers:
$output =~ s/{{library-table}}/$siglaInfo/g;
$output =~ s/{{composer-tables}}/$composerInfo/g;
$output =~ s/{{notecount}}/$commanotes/g;
$output =~ s/{{scorecount}}/$commafiles/g;

print $output;


###########################################################################


##############################
##
## getComposerList -- Return a list of composers indexed by filename.
##

sub getComposerList {
	my %output;
	foreach my $file (@filelist) {
		open(FILE, $file) or die "Cannot open $file\n";
		while (my $line = <FILE>) {
			if ($line =~ /^!!!COM:\s*(.*)\s*$/) {
				$output{$file} = $1;
				last;
			}
		}
		close FILE;
	}
	return %output;
}



##############################
##
## buildComposerTable -- Create Markdown table listing composers
##     represented in the repository.
##

sub buildComposerTable {
	my $output = "";

	my %c;
	foreach my $file (@filelist) {
		my $composer = $composerList{$file};
		$c{$composer}++;
	}
	my @composers = sort keys %c;

	$output .= "<details markdown=\"1\">\n";
	$output .= "<summary> Alphabetical composer list</summary>\n";

	$output .= "\n";
	$output .= "| Composer | Scores | Notes |\n";
	$output .= "| -------- | -----: | ----: |\n";

	my @entries;
	foreach my $composer (@composers) {
		my $entry = "";
		my $scores = commify($c{$composer});
		my $notes  = commify(getNoteCountForComposer($composer));
		$composer = "Anonymous" if $composer eq "Anonim";
		$entry = "| $composer | $scores | $notes |\n";
		$entries[@entries] = $entry;
		$output .= $entry;
	}

	$output .= "\n</details>\n\n";

	$output .= "<details markdown=\"1\">\n";
	$output .= "<summary> Composer list by score count</summary>\n";
	$output .= "\n";
	$output .= "| Composer | Scores | Notes |\n";
	$output .= "| -------- | -----: | ----: |\n";
	my @scoresort = sortEntriesByScoreCount(@entries);
	foreach my $line (@scoresort) {
		$output .= $line;
	}
	
	$output .= "\n</details>\n\n";

	$output .= "<details markdown=\"1\">\n";
	$output .= "<summary> Composer list by notecount count</summary>\n";
	$output .= "\n";
	$output .= "| Composer | Scores | Notes |\n";
	$output .= "| -------- | -----: | ----: |\n";
	my @notesort = sortEntriesByNoteCount(@entries);
	foreach my $line (@notesort) {
		$output .= $line;
	}

	$output .= "\n</details>\n\n";

	return $output;
}



##############################
##
## sortEntriesByScoreCount --
##

sub sortEntriesByScoreCount {
	my @entries = @_;
	my @output = sort {     
		$a =~ /\|\s*([0-9,]+)\s*\|\s*([0-9,]+)\s*\|/;
		my $anum = $1;
		$anum =~ s/,//g;
		$b =~ /\|\s*([0-9,]+)\s*\|\s*([0-9,]+)\s*\|/;
		my $bnum = $1;
		$bnum =~ s/,//g;
		return $bnum <=> $anum;
	} @entries;
	return @output;
}



##############################
##
## sortEntriesByNoteCount --
##

sub sortEntriesByNoteCount {
	my @entries = @_;
	my @output =  sort {     
		$a =~ /\|\s*([0-9,]+)\s*\|\s*(0-9,]+)\s*\|/;
		my $anum = $2;
		$anum =~ s/,//g;
		$b =~ /\|\s*([0-9,]+)\s*\|\s*([0-9,]+)\s*\|/;
		my $bnum = $2;
		$bnum =~ s/,//g;
		return $bnum <=> $anum;
	} @entries;
	return @output;
}



##############################
##
## getNoteCountForComposer --
##

sub getNoteCountForComposer {
	my ($composer) = @_;
	my $output = 0;
	foreach my $file (@filelist) {
		if ($composerList{$file} eq $composer) {
			$output += $notecounts{$file};
		}
	}
	return $output;
}



##############################
##
## buildLibraryTable -- Create Markdown table listing source archives sorted by RISM siglum.
#
# @@BEGIN: ENTRY
#    @Siglum:		PL-Kj
#    @RISM-ID:		30002079
#    @Name-long-PL:		Biblioteka Jagiellońska
#    @Name-short-PL:		Biblioteka Jagiellońska
#    @Name-long-EN:		Jagiellonian University Libraries
#    @Name-short-EN:		Jagiellonian Library, Cracow
#    @Website-PL:		https://bj.uj.edu.pl
#    @Website-EN:		https://bj.uj.edu.pl/en_GB/start-en
#    @NIFC-URL-PL:		
#    @NIFC-URL-EN:		
#    @@END: ENTRY
##

sub buildLibraryTable {
	my $macroid = "AKfycbyCYdG0G1mlr-EyN498pmM3w5OD967frNkdHN2JJaWe53LQEriPk79fZ0Ycc8iZq_DsVw";
	my $url = "https://script.google.com/macros/s/$macroid/exec?format=aton";
	my $command = "wget $url -O - 2> /dev/null";
	my @contents = `$command`;
	chomp @contents;
	my %sigurls;
	my %signames;
	my %sigrism;
	my $siglum;
	my $rism;
	my $name;
	my $urlen;
	my $urlpl;
	my $counter = 0;
	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		if ($line =~ /^\@\@BEGIN:/) {
			$siglum = "";
			$rism = "";
			$name = "";
			$urlen = "";
			$urlpl = "";
			next;
		}
		if ($line =~ /^\@Siglum:\s*(.*?)\s*$/) { $siglum = $1; }
		if ($line =~ /^\@RISM-ID:\s*(\d+)\s*$/) { $rism = $1; }
		if ($line =~ /^\@Name-short-EN:\s*(.*?)\s*$/) { $name = $1; }
		if ($line =~ /^\@Website-PL:\s*(.*?)\s*$/) { $urlpl = $1; }
		if ($line =~ /^\@Website-EN:\s*(.*?)\s*$/) { $urlen = $1; }
		if (($line =~ /^\@\@END:/) && ($siglum !~ /^\s*$/)) {
			my $siglow = lc($siglum);
			$signames{$siglow} = $name;
			$sigrism{$siglow} = $rism;
			$sigurls{$siglow}  = $urlen;
			$sigurls{$siglow}  = $urlpl if $sigurls{$siglow} =~ /^\s*$/;
			$counter++;
		}
	}
	my %sigfiles;
	my %signotes;

	foreach my $file (@filelist) {
		next if $file !~ /^([a-z]+-[a-z]+)\//;
		my $siglum = $1;
		$sigfiles{$siglum}++;
		$signotes{$siglum} += $notecounts{$file};
	}

	my @skeys = sort keys %signotes;

	my $basedir = "https://github.com/pl-wnifc/humdrum-polish-scores/tree/main";
	my $output = "";
	$output .= "| Siglum | Library | Scores |    % | Notes |    % |\n";
	$output .= "| ------ | ------- | -----: | ---: | ----: | ---: |\n";
	for (my $i=0; $i<@skeys; $i++) {
		my $siglum = $skeys[$i];
		my $lcsiglum = lc($siglum);
		my $scorepercent  = int($sigfiles{$siglum}/$totalfiles * 1000.0)/10.0;
		my $notepercent   = int($signotes{$siglum}/$totalnotes * 1000.0)/10.0;
		$scorepercent .= ".0" if $scorepercent !~ /\./;
		$notepercent  .= ".0" if $notepercent  !~ /\./;
		my $commascores = commify($sigfiles{$siglum});
		my $commanotes  = commify($signotes{$siglum});

		my $rism = $sigrism{$siglum};
		my $datadir = "$basedir/$siglum/kern";
		my $sigurl = $sigurls{$siglum};
		my $signame = $signames{$siglum};
		$output .= "| <a target=\"_blank\" href=\"https://polishscores.org?s=$lcsiglum\"><img src=\"https://raw.githubusercontent.com/craigsapp/website-polish-scores/main/img/siglum/$lcsiglum.svg\"></a>";
		$output .= "<br/><span style=\"white-space:pre; text-align:center;\" class=\"nobr\">[$siglum]($datadir)</span></span> ";
		$output .= "| [$signame]($sigurl) ";
		$output .= "| $commascores ";
		$output .= "| $scorepercent ";
		$output .= "| $commanotes ";
		$output .= "| $notepercent ";
		$output .= "|\n";
	}

	$output = "<details open><summary>Archives represented in repository</summary>\n\n$output\n</details>";

	return $output;
}



##############################
##
## getNoteCounts -- Count notes in all input files.   The results will be
##     stored for later use.  The notecount tool is also used as a basic
##     check to verify the structure of the file (otherwise notes cannot
##     be counted).
##

sub getNoteCounts {
	my %output;
	foreach my $file (@filelist) {
		my $count = `notecount $file | extractx -i print | ridx -H`;
		chomp $count;
		die "Problem with file $file $count\n" if $count !~ /^\d+$/;
		die "Problem with zero note count in file $file\n" if !$count;
		$output{$file} = $count;
	}
	return %output;
}



##############################
##
## getTotalNotes --
##

sub getTotalNotes {
	my $output = 0;
	foreach my $file (@filelist) {
		$output += $notecounts{$file};
	}
	return $output;
}



##############################
##
## commify -- Add commas to numbers for thousands separator.
##

sub commify {
	my ($number) = @_;
	$number =~ s/(\d)(?=(\d{3})+(\D|$))/$1\,/g;
	return $number;
}



__DATA__
Humdrum Polish Scores
======================================

This repository contains transcriptions from the _Heritage of Polish
Music in Open Access_ project at the [Chopin Institute](https://nifc.pl/en) in the
Humdrum digital score format.   Files are organized by the RISM siglum ID of the
source archive.



Frontend
--------

The main user interface for these digital scores is at https://polishscores.org.
All transcriptions include scans of the physical scores.



Represented libraries and archives
----------------------------------

Here are a list archives represented in the repository.  Directory
names are based on the RISM siglum of the archive.  Click on the
archive icon in the first column to see a list of the scores at
https://polishscores.org, or click on the directory name in the
first column to see a list of the Humdrum digital transcriptions
for the given archive on Github, or click on the name of the archive
to visit its webpage.

The `Scores` column lists the number of digital transcriptions within
each archive directory, and the `Notes` column gives the number of
musical notes contained within those scores.   Currently there are
{{scorecount}} scores containing a total of {{notecount}} notes.

{{library-table}}



Composers
---------

{{composer-tables}}


Filenames
---------

Filenames are in the form `siglum--shelfmark--sequence_composer--title.krn`

Example: `pl-kc--40102-iii-1-saf--002-052_zielenski-mikolaj--communiones-totius-anni-in-epiphania-domini-vidimus-stellam-eius.krn`

| Component | Meaning |
| --------- | ------- |
| `pl-kc`     | RISM siglum of source archive. |
| `40102-iii-saf` | Shelf mark containing source of transcription. |
| `002-005`   | This is fifth movement/work in the second work/group in the given shelfmark. |
| `zielenski-mikolaj` | The composer's name |
| `communiones-totius-anni-in-epiphania-domini-vidimus-stellam-eius` | The composition title. |

Filenames only contains letters (a-z without accents), numbers, dashes, underscores and dots.

The first part of the file name (siglum + shelfmark + sheflmark enumeration) is unique and 
is used for data processing, while the second part of the file name (composer + title) is for
human readability.


Reference records
-----------------

Here is a list of reference records used in the Humdrum scores and their meanings:

{{reference-table}}







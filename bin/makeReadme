#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Sun Aug 21 09:58:33 CEST 2022
# Last Modified: Mon Aug 22 18:21:31 CEST 2022
# Filename:      humdrum-polish-scores/bin/makeReadme
# Syntax:        perl 5
#
# Description:   Create readme for repository.
#

use strict;

my @filelist = glob("*/kern/*.krn");
my $totalfiles = @filelist;
my $commafiles = commify($totalfiles);

my %notecounts = getNoteCounts();
my $totalnotes = getTotalNotes();
my $commanotes = commify($totalnotes);

my %encoders;
my %editors;
my %modern;
my %iiif;
my %people;

my %composerList = getComposerList();

my @data = <DATA>;
my $output = join("", @data);

my $siglaInfo     = buildLibraryTable();
my $composerInfo  = buildComposerTable();
my $referenceInfo = buildReferenceTable();
my $encoderInfo   = buildEncoderTable();
my $scanInfo      = buildScanTable();


# Fill in template markers:
$output =~ s/\{\{library-table\}\}/$siglaInfo/g;
$output =~ s/\{\{composer-tables\}\}/$composerInfo/g;
$output =~ s/\{\{reference-table\}\}/$referenceInfo/g;
$output =~ s/\{\{encoder-table\}\}/$encoderInfo/g;
$output =~ s/\{\{scan-table\}\}/$scanInfo/g;
$output =~ s/\{\{notecount\}\}/$commanotes/g;
$output =~ s/\{\{scorecount\}\}/$commafiles/g;

print $output;


###########################################################################


##############################
##
## getComposerList -- Return a list of composers indexed by filename.
##

sub getComposerList {
	my %output;
	foreach my $file (@filelist) {
		open(FILE, $file) or die "Cannot open $file\n";
		while (my $line = <FILE>) {
			if ($line =~ /^!!!COM:\s*(.*)\s*$/) {
				$output{$file} = $1;
				last;
			}
		}
		close FILE;
	}
	return %output;
}



##############################
##
## buildComposerTable -- Create Markdown table listing composers
##     represented in the repository.
##

sub buildComposerTable {
	my $output = "";

	my %c;
	foreach my $file (@filelist) {
		my $composer = $composerList{$file};
		$c{$composer}++;
	}
	my @composers = sort keys %c;

	$output .= "<details markdown=\"1\">\n";
	$output .= "<summary> Alphabetical composer list</summary>\n";

	$output .= "\n";
	$output .= "| Composer | Scores | Notes |\n";
	$output .= "| -------- | -----: | ----: |\n";

	my @entries;
	foreach my $composer (@composers) {
		my $entry = "";
		my $scores = commify($c{$composer});
		my $notes  = commify(getNoteCountForComposer($composer));
		$composer = "Anonymous" if $composer eq "Anonim";
		$entry = "| $composer | $scores | $notes |\n";
		$entries[@entries] = $entry;
		$output .= $entry;
	}

	$output .= "\n</details>\n\n";

	$output .= "<details markdown=\"1\">\n";
	$output .= "<summary> Composer list by score count</summary>\n";
	$output .= "\n";
	$output .= "| Composer | Scores | Notes |\n";
	$output .= "| -------- | -----: | ----: |\n";
	my @scoresort = sortEntriesByScoreCount(@entries);
	foreach my $line (@scoresort) {
		$output .= $line;
	}
	
	$output .= "\n</details>\n\n";

	$output .= "<details markdown=\"1\">\n";
	$output .= "<summary> Composer list by note count</summary>\n";
	$output .= "\n";
	$output .= "| Composer | Scores | Notes |\n";
	$output .= "| -------- | -----: | ----: |\n";
	my @notesort = sortEntriesByNoteCount(@entries);
	foreach my $line (@notesort) {
		$output .= $line;
	}

	$output .= "\n</details>\n\n";

	return $output;
}



##############################
##
## sortEntriesByScoreCount --
##

sub sortEntriesByScoreCount {
	my @entries = @_;
	my @output = sort {
		$a =~ /\|\s*([0-9,]+)\s*\|\s*([0-9,]+)\s*\|/;
		my $anum = commify($1);
		$anum =~ s/,//g;
		$b =~ /\|\s*([0-9,]+)\s*\|\s*([0-9,]+)\s*\|/;
		my $bnum = commify($1);
		$bnum =~ s/,//g;
		return $bnum <=> $anum;
	} @entries;
	return @output;
}



##############################
##
## sortEntriesByNoteCount --
##

sub sortEntriesByNoteCount {
	my @entries = @_;
	my @output =  sort {
		$a =~ /\|\s*([0-9,]+)\s*\|\s*([0-9,]+)\s*\|/;
		my $anum = commify($2);
		$anum =~ s/,//g;
		$b =~ /\|\s*([0-9,]+)\s*\|\s*([0-9,]+)\s*\|/;
		my $bnum = commify($2);
		$bnum =~ s/,//g;
		return $bnum <=> $anum;
	} @entries;
	return @output;
}



##############################
##
## getNoteCountForComposer --
##

sub getNoteCountForComposer {
	my ($composer) = @_;
	my $output = 0;
	foreach my $file (@filelist) {
		if ($composerList{$file} eq $composer) {
			$output += $notecounts{$file};
		}
	}
	return $output;
}



##############################
##
## buildLibraryTable -- Create Markdown table listing source archives sorted by RISM siglum.
#
# @@BEGIN: ENTRY
#    @Siglum:		PL-Kj
#    @RISM-ID:		30002079
#    @Name-long-PL:		Biblioteka Jagiellońska
#    @Name-short-PL:		Biblioteka Jagiellońska
#    @Name-long-EN:		Jagiellonian University Libraries
#    @Name-short-EN:		Jagiellonian Library, Cracow
#    @Website-PL:		https://bj.uj.edu.pl
#    @Website-EN:		https://bj.uj.edu.pl/en_GB/start-en
#    @NIFC-URL-PL:		
#    @NIFC-URL-EN:		
#    @@END: ENTRY
##

sub buildLibraryTable {
	my $macroid = "AKfycbyCYdG0G1mlr-EyN498pmM3w5OD967frNkdHN2JJaWe53LQEriPk79fZ0Ycc8iZq_DsVw";
	my $url = "https://script.google.com/macros/s/$macroid/exec?format=aton";
	my $command = "wget $url -O - 2> /dev/null";
	my @contents = `$command`;
	chomp @contents;
	my %sigurls;
	my %signames;
	my %sigrism;
	my $siglum;
	my $rism;
	my $name;
	my $urlen;
	my $urlpl;
	my $counter = 0;
	my $siglow;
	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		if ($line =~ /^\@\@BEGIN:/) {
			$siglum = "";
			$rism = "";
			$name = "";
			$urlen = "";
			$urlpl = "";
			next;
		}
		if ($line =~ /^\@Siglum:\s*(.*?)\s*$/) { $siglum = $1; $siglow = lc($siglum); }
		if ($line =~ /^\@RISM-ID:\s*(\d+)\s*$/) { $rism = $1; }
		if ($line =~ /^\@Name-short-EN:\s*(.*?)\s*$/) { $name = $1; }
		if ($line =~ /^\@Website-PL:\s*(.*?)\s*$/) { $urlpl = $1; }
		if ($line =~ /^\@Website-EN:\s*(.*?)\s*$/) { $urlen = $1; }
		if (($line =~ /^\@\@END:/) && ($siglum !~ /^\s*$/)) {
			$signames{$siglow} = $name;
			print STDERR "SIGNAME $siglow IS $name\n";
			$sigrism{$siglow} = $rism;
			$sigurls{$siglow}  = $urlen;
			$sigurls{$siglow}  = $urlpl if $sigurls{$siglow} =~ /^\s*$/;
			$counter++;
		}
	}
	my %sigfiles;
	my %signotes;

	foreach my $file (@filelist) {
		next if $file !~ /^([a-z]+-[a-z]+)\//;
		my $siglum = $1;
		my $siglow = lc($siglum);
		$sigfiles{$siglow}++;
		$signotes{$siglow} += $notecounts{$file};
	}

	# Sort libraries by transcription count:
	my @slines;
	foreach my $key (keys %signotes) {
 		my $line = "$signotes{$key}\t$key";
		$slines[@slines] = $line;
	}
	@slines = sort { $b <=> $a } @slines;
	my @skeys;
	foreach my $line (@slines) {
		my @fields = split(/\t/, $line);
		my $skey = $fields[1];
		$skeys[@skeys] = $skey;
	}

	my $basedir = "https://github.com/pl-wnifc/humdrum-polish-scores/tree/main";
	my $output = "";
	$output .= "| Siglum | Library | Scores |    % | Notes |    % |\n";
	$output .= "| ------ | ------- | -----: | ---: | ----: | ---: |\n";
	for (my $i=0; $i<@skeys; $i++) {
		my $siglum = $skeys[$i];
		my $siglow = lc($siglum);
		my $scorepercent  = int($sigfiles{$siglum}/$totalfiles * 1000.0)/10.0;
		my $notepercent   = int($signotes{$siglum}/$totalnotes * 1000.0)/10.0;
		$scorepercent .= ".0" if $scorepercent !~ /\./;
		$notepercent  .= ".0" if $notepercent  !~ /\./;
		my $commascores = commify($sigfiles{$siglum});
		my $commanotes  = commify($signotes{$siglum});

		my $rism = $sigrism{$siglum};
		my $datadir = "$basedir/$siglum/kern";
		my $siglow = lc($siglum);
		my $sigurl = $sigurls{$siglow};
		my $signame = $signames{$siglow};

		if ($signame =~ /^\s*$/) {
			print STDERR "CANNOT FIND SIGNAME IN LIST:\n";
			my @keys = sort keys %signames;
			foreach my $key (@keys) {
				print STDERR "\t$key\t$signames{$key}\n";
			}
			die;
		}

		if (-r "../website-polish-scores/img/siglum/$siglow.svg") {
			$output .= "| <a target=\"_blank\" href=\"https://polishscores.org?s=$siglow\"><img src=\"https://raw.githubusercontent.com/craigsapp/website-polish-scores/main/img/siglum/$siglow.svg\"></a>";
		} else {
			$output .= "| <a target=\"_blank\" href=\"https://polishscores.org?s=$siglow\"><img src=\"https://raw.githubusercontent.com/craigsapp/website-polish-scores/main/img/siglum/unknown.svg\"></a>";
		}
		$output .= "<br/><span style=\"white-space:pre; text-align:center;\" class=\"nobr\">[$siglum]($datadir)</span></span> ";
		$output .= "| [$signame]($sigurl) ";
		$output .= "| $commascores ";
		$output .= "| $scorepercent ";
		$output .= "| $commanotes ";
		$output .= "| $notepercent ";
		$output .= "|\n";
	}

	$output = "<details><summary>Archives represented in repository</summary>\n\n$output\n</details>";

	return $output;
}



##############################
##
## getNoteCounts -- Count notes in all input files.   The results will be
##     stored for later use.  The notecount tool is also used as a basic
##     check to verify the structure of the file (otherwise notes cannot
##     be counted).
##

sub getNoteCounts {
	my %output;
	foreach my $file (@filelist) {
		my $count = `notecount $file | extractx -i print | ridx -H`;
		chomp $count;
		die "Problem with file $file $count\n" if $count !~ /^\d+$/;
		die "Problem with zero note count in file $file\n" if !$count;
		$output{$file} = $count;
	}
	return %output;
}



##############################
##
## getTotalNotes --
##

sub getTotalNotes {
	my $output = 0;
	foreach my $file (@filelist) {
		$output += $notecounts{$file};
	}
	return $output;
}



##############################
##
## commify -- Add commas to numbers for thousands separator.
##

sub commify {
	my ($number) = @_;
	$number =~ s/(\d)(?=(\d{3})+(\D|$))/$1\,/g;
	return $number;
}


##############################
##
## buildScanTable --
##


sub buildScanTable {
	my @entries = `grep -rh URL-scan */kern`;
	my %entries;
	my $count = 0;
	for (my $i=0; $i<@entries; $i++) {
		my $line = $entries[$i];
		next if $line !~ /(https?:\/\/[^\/]+)/;
		$entries{$1}++;
		$count++;
	}

	my %names;

	$names{"https://polish.musicsources.pl"}   = '<a target="_blank" href="https://polish.musicsources.pl">Polish Music Sources</a> (<a target="_blank" href="https://nifc.pl">NIFC<a>)';
	$names{"https://cyfrowe.mnk.pl"}           = '<a target="_blank" href="https://cyfrowe.mnk.pl">Polish National Museum in Krakow</a>';
	$names{"http://staniatki.studiokropka.pl"} = '<a target="_blank" href="http://staniatki.studiokropka.pl/mbp">Music of the Polish Benedictine Sisters</a>';
	$names{"https://polona.pl"}                = '<a target="_blank" href="http://polona.pl">Polona</a> (<a target="_blank" href="https://www.bn.org.pl/en">Polish National Library</a>)';
	$names{"https://bc.bdsandomierz.pl"}       = '<a target="_blank" href="https://bc.bdsandomierz.pl/dilibra">Digital Library of the Diocesan Library in Sandomierz</a>';

	my @keys = sort keys %entries;
	my $output = "| Website | Scores | Percent |\n";
	$output .=   "| ------- | -----: | ------: |\n";

	foreach my $key (@keys) {
		my $percent = ($entries{$key}  / $count) * 100.0;
		my $name = $names{$key};
		if ($name =~ /^\s*$/) {
			$name = "($key)[$key]";
		}
		$percent = int($percent * 10.0)/10.0;
		$percent .= ".0" if $percent !~ /\./;
		my $value = commify($entries{$key});
		$output .= "| $name | $value | $percent |\n";
	}

	$output .= "| TOTAL | $count |     |\n";

	$output = "<details>\n<summary>List of scan source websites</summary>\n\n$output\n</details>\n";
	return $output;
}



##############################
##
## buildReferenceTable --
##

sub buildReferenceTable {

	my %refInfo;
	$refInfo{"AGN"} =                   "Genre.  Multiple genres separated by semicolons (;).";
	$refInfo{"AIN"} =                   "Instrumentation";
	$refInfo{"AIN-mod"} =               "Modern instrumentation";
	$refInfo{"ARL"} =                   "Geographical region";
	$refInfo{"CDT"} =                   "Composer's dates (birth-death)";
	$refInfo{"CNT"} =                   "Composer nationality";
	$refInfo{"COM"} =                   "Composer's name";
	$refInfo{"COM-rismID"} =            "RISM Online ID of the composer";
	$refInfo{"CharacterEncoding"} =     "IGNORE";
	$refInfo{"EED"} =                   "Digital score editor";
	$refInfo{"EED2"} =                  "IGNORE";
	$refInfo{"EED3"} =                  "IGNORE";
	$refInfo{"EED4"} =                  "IGNORE";
	$refInfo{"EED5"} =                  "IGNORE";
	$refInfo{"EED6"} =                  "IGNORE";
	$refInfo{"EED7"} =                  "IGNORE";
	$refInfo{"EED8"} =                  "IGNORE";
	$refInfo{"EED9"} =                  "IGNORE";
	$refInfo{"EED-modern"} =            "Editor of modernization filter";
	$refInfo{"EEV"} =                   "Digital score version";
	$refInfo{"EEV-modern"} =            "Revision date for modernization filter";
	$refInfo{"EEV2"} =                  "IGNORE";
	$refInfo{"EEV3"} =                  "IGNORE";
	$refInfo{"EEV4"} =                  "IGNORE";
	$refInfo{"EEV5"} =                  "IGNORE";
	$refInfo{"EEV6"} =                  "IGNORE";
	$refInfo{"EEV7"} =                  "IGNORE";
	$refInfo{"EEV8"} =                  "IGNORE";
	$refInfo{"EEV9"} =                  "IGNORE";
	$refInfo{"EFL"} =                   "IGNORE";
	$refInfo{"ENC"} =                   "Digital score encoder";
	$refInfo{"ENC2"} =                  "IGNORE";
	$refInfo{"ENC3"} =                  "IGNORE";
	$refInfo{"ENC4"} =                  "IGNORE";
	$refInfo{"ENC5"} =                  "IGNORE";
	$refInfo{"ENC6"} =                  "IGNORE";
	$refInfo{"ENC7"} =                  "IGNORE";
	$refInfo{"ENC8"} =                  "IGNORE";
	$refInfo{"ENC9"} =                  "IGNORE";
	$refInfo{"ENC-iiif"} =              "Encoder of IIIF bounding boxes";
	$refInfo{"ENC-modern"} =            "Encoder of modernization filter";
	$refInfo{"END"} =                   "Encoding date";
	$refInfo{"END2"} =                  "IGNORE";
	$refInfo{"END3"} =                  "IGNORE";
	$refInfo{"END4"} =                  "IGNORE";
	$refInfo{"END5"} =                  "IGNORE";
	$refInfo{"END6"} =                  "IGNORE";
	$refInfo{"END7"} =                  "IGNORE";
	$refInfo{"END8"} =                  "IGNORE";
	$refInfo{"END9"} =                  "IGNORE";
	$refInfo{"END-iiif"} =              "Encoding date for IIIF bounding boxes";
	$refInfo{"END-modern"} =            "Encoding date for moderization filter";
	$refInfo{"ESR"} =                   "IGNORE";
	$refInfo{"EST"} =                   "IGNORE";
	$refInfo{"GTL"} =                   "Title of multiple works forming a group";
	$refInfo{"IIIF"} =                  "IIIF manifest for source scan";
	$refInfo{"LO"} =                    "IGNORE";
	$refInfo{"NIFC-islandoraID"} =      "NIFC Islandora ID";
	$refInfo{"NIFC-rismChildID"} =      "RISM Online ID of the particular piece in source edition/manuscript";
	$refInfo{"NIFC-rismSourceID"} =     "RISM Online ID for source edition/manuscript";
	$refInfo{"ODT"} =                   "IGNORE";
	$refInfo{"OMD"} =                   "Movement designation (such as \"Allegro\"";
	$refInfo{"OMD-mod"} =               "Modern movement designation";
	$refInfo{"OMV"} =                   "Movement number";
	$refInfo{"ONB"} =                   "General note";
	$refInfo{"ONB-nifc"} =              "NIFC-specific general note";
	$refInfo{"OPR"} =                   "Title of work when there are multiple movements";
	$refInfo{"OTL"} =                   "Title of single-movement work, or title of movement";
	$refInfo{"OTL\@\@LAT"} =            "IGNORE";
	$refInfo{"OTL\@\@POL"} =            "IGNORE";
	$refInfo{"PDT"} =                   "Publication date";
	$refInfo{"RDF**dynam"} =            "Signifier definition for dynam spines";
	$refInfo{"RDF**kern"} =             "Signifier definition for kern spines";
	$refInfo{"SMS"} =                   "IGNORE";
	$refInfo{"SMS-altvar"} =            "IGNORE";
	$refInfo{"SMS-shelfmark"} =         "Shelfmark of score";
	$refInfo{"SMS-shelfwork"} =         "Enumeration of work/movement within shelfmark";
	$refInfo{"SMS-siglum"} =            "RISM siglum of source archive";
	$refInfo{"SMS-variant"} =           "IGNORE";
	$refInfo{"TXO"} =                   "IGNORE";
	$refInfo{"URL-pdf-islandora"} =     "PDF of scan from NIFC Islandora database";
	$refInfo{"URL-scan"} =              "URL for scan of source edition/manuscript";
	$refInfo{"YEM"} =                   "Copyright message";
	$refInfo{"YEC"} =                   "Date and owner of electronic copyright";
	$refInfo{"cenid"} =                 "Century ID";
	$refInfo{"filter-modern"} =         "Modernization filter";
	$refInfo{"finalis"} =               "Finalis note (early music)";
	$refInfo{"kernsource"} =            "IGNORE";
	$refInfo{"key"} =                   "Human-assigned musical key";
	$refInfo{"pag"} =                   "IGNORE";
	$refInfo{"rism-genre"} =            "IGNORE";
	$refInfo{"rism-key"} =              "IGNORE";
	$refInfo{"rism-title"} =            "IGNORE";
	$refInfo{"system-decoration"} =     "Bracketing on left side of system";
	$refInfo{"system-decoration-mod"} = "Modernized bracketing on left side of system";
	$refInfo{"tempo-scaling"} =         "IGNORE";
	$refInfo{"voices"} =                "IGNORE";

	my @reflist = `grep -rh "^!!![^\!:]*:" */kern | sed 's/:.*//; s/^!*//' | sort | uniq`;
	chomp @reflist;

	my $output = "";
	$output .= "| Reference&nbsp;key | Meaning |\n";
	$output .= "| ------------------ | ------- |\n";

	foreach my $key (@reflist) {
		my $description = $refInfo{$key};
		next if $description eq "IGNORE";
		$description = "UNKNOWN" if $description =~ /^\s*$/;
		$output .= "| `$key` | $description |\n";
	}

	$output = "<details>\n<summary>List of reference records</summary>\n\n$output\n</details>\n";
	
	return $output;
}



##############################
##
## buildEncoderTable --
##

sub buildEncoderTable {
	my $output = "";

	setupEncoderInformation();

	my @peeps = keys %people;
	@peeps = sort {
		my $alast = $a;
		my $blast = $b;
		$alast =~ s/\s+$//;
		$blast =~ s/\s+$//;
		$alast =~ s/.* //;
		$blast =~ s/.* //;
		return $alast cmp $blast;
	} @peeps;

	$output .= "| Name | Encoded scores | Encoded notes | Edited scores | Modern&nbsp;ed. | IIIF&nbsp;enc. |\n";
	$output .= "| ---- | -------------: | ------------: | ------------: | ---------: | ----------: |\n";

	my $totalEncodedScores = 0;
	my $totalEncodedNotes  = 0;
	my $totalEditedScores  = 0;
	my $totalModernScores  = 0;
	my $totalIiifScores    = 0;

	for (my $i=0; $i<@peeps; $i++) {
		my $name = $peeps[$i];
		next if $name =~ /^\s*$/;

		my $encodedScores = getEncodedScores($peeps[$i]);
		my $encodedNotes  = getEncodedNotes($peeps[$i]);
		my $editedScores  = getEditedScores($peeps[$i]);
		my $modernScores  = getModernScores($peeps[$i]);
		my $iiifScores    = getIiifScores($peeps[$i]);

		$totalEncodedScores += $encodedScores;
		$totalEncodedNotes  += $encodedNotes;
		$totalEditedScores  += $editedScores;
		$totalModernScores  += $modernScores;
		$totalIiifScores    += $iiifScores;

		next if $name =~ /^\s*$/;
		$output .= "| ";
		$output .= $peeps[$i];
		$output .= " | ";
		$output .= commify($encodedScores);
		$output .= " | ";
		$output .= commify($encodedNotes);
		$output .= " | ";
		$output .= commify($editedScores);
		$output .= " | ";
		$output .= commify($modernScores);
		$output .= " | ";
		$output .= commify($iiifScores);
		$output .= " |\n";
	}

	$output .= "| TOTALS | " . commify($totalEncodedScores) . " | " . commify($totalEncodedNotes) . " | " . commify($totalEditedScores) . " | " . commify($totalModernScores) . " | " . commify($totalIiifScores) . " |\n";

	$output = "<details open>\n<summary>Digital score encoders and editors </summary>\n\n$output\n</details>\n";

	return $output;
}



##############################
##
## getEncodedScores --
##

sub getEncodedScores {
	my ($person) = @_;
	my $total = 0;
	foreach my $file (@filelist) {
		if ($encoders{$file} eq $person) {
			$total++;
		}
	}
	if ($total) {
		return $total;
	} else {
		return "";
	}

}


##############################
##
## getEncodedNotes --
##

sub getEncodedNotes {
	my ($person) = @_;
	my $total = 0;
	foreach my $file (@filelist) {
		if ($encoders{$file} eq $person) {
			$total+= $notecounts{$file};
		}
	}
	if ($total) {
		return $total;
	} else {
		return "";
	}


}



##############################
##
## getEditedScores --
##

sub getEditedScores {
	my ($person) = @_;
	my $total = 0;
	foreach my $file (@filelist) {
		if ($editors{$file} eq $person) {
			$total++;
		}
	}
	if ($total) {
		return $total;
	} else {
		return "";
	}
}



##############################
##
## getModernScores --
##

sub getModernScores {
	my ($person) = @_;
	my $total = 0;
	foreach my $file (@filelist) {
		if ($modern{$file} eq $person) {
			$total++;
		}
	}
	if ($total) {
		return $total;
	} else {
		return "";
	}
}



##############################
##
## getIiifScores --
##

sub getIiifScores {
	my ($person) = @_;
	my $total = 0;
	foreach my $file (@filelist) {
		if ($iiif{$file} eq $person) {
			$total++;
		}
	}
	if ($total) {
		return $total;
	} else {
		return "";
	}
}



##############################
##
## setupEncoderInformation --
##

sub setupEncoderInformation {
	# my %encoders;
	# my %editors;
	# my %modern;
	# my %iiif;
	my $encoder;
	my $editor;
	my $modenc;
	my $iiifenc;

	foreach my $file (@filelist) {
		($encoder, $editor, $modenc, $iiifenc) = getEncoderInformation($file);
		$encoders{$file} = $encoder if $encoder !~ /^\s*$/;
		$editors{$file}  = $editor  if $editor  !~ /^\s*$/;
		$modern{$file}   = $modenc  if $modenc  !~ /^\s*$/;
		$iiif{$file}     = $iiifenc if $iiifenc !~ /^\s*$/;
	}
}



##############################
##
## getEncoderInformation --
##

sub getEncoderInformation {
	my ($file) = @_;
	open(FILE, $file) or die "Cannot read $file\n";
	my @contents = <FILE>;
	close FILE;
	chomp @contents;
	my $enc1     = "";
	my $enc1date = 0;
	my $enc2     = "";
	my $enc2date = 0;
	my $eed      = "";
	my $eeddate  = 0;
	my $modern   = "";
	my $iiif     = "";

	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		next if $line !~ /^!!!([^!:]+):\s*(.*)\s*$/;
		my $key = $1;
		my $value = $2;
		$modern = $value if $key eq "ENC-modern";
		$iiif = $value if $key eq "ENC-iiif";

		if ($key eq "EED") {
			$eed = $value;
			my $line2 = $contents[$i+1];
			if ($line2 =~ /^!!!([^!:]+):\s*(.*)\s*$/) {
				my $date = $2;
				$date =~ s/-//g;
            $eeddate = $date;
			}
		}

		if ($key eq "ENC") {
			my $enc = $value;
			my $date = 0;
			my $line2 = $contents[$i+1];
			if ($line2 =~ /^!!!([^!:]+):\s*(.*)\s*$/) {
				$date = $2;
				$date =~ s/-//g;
			}
			if ($enc1 =~ /^\s*$/) {
				$enc1 = $enc;
				$enc1date = $date;
			} else {
				$enc2 = $enc;
				$enc2date = $date;
			}
		}
	}

	if (($enc1date > 0) && ($enc2date > 0)) {
		if ($enc1date > $enc2date) {	
			my $temp = $enc1;
			$enc1 = $enc2;
			$enc2 = $temp;
		}
	}

	if ($eed) {	
		$enc2 = $eed;
	}

	$people{$enc1}++;
	$people{$enc2}++;
	$people{$modern}++;
	$people{$iiif}++;

	return ($enc1, $enc2, $modern, $iiif);
}



__DATA__

[![License: CC BY 4.0](https://img.shields.io/badge/License-CC_BY_4.0-lightgrey.svg)](https://creativecommons.org/licenses/by/4.0/)
[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.7118989.svg)](https://doi.org/10.5281/zenodo.7118989)

Digital scores from the Polish Heritage in Open Access project
==============================================================

This repository contains transcriptions from the _Heritage of Polish
Music in Open Access_ project at the [Chopin Institute](https://nifc.pl/en) in the
Humdrum digital score format.   Files are organized by the RISM siglum ID of the
source archive.  Here is a promotional booklet about the project 
in [Polish](https://polishscores.org/info/booklet/popc-2022_pl.pdf)
and [English](https://polishscores.org/info/booklet/popc-2022_en.pdf).



People and Sponsors
-------------------

* **Lead**: Marcin Konik
* **Technical Lead**: Craig Stuart Sapp (digital scores, transcription website)
* **Project Manager**: Jacek Iwaszko (digital scores, source edition scans)
* **Metadata Manager**: Marcelina Chojecka
* **Assistant Project Manager**: Emilia Ziętek

{{encoder-table}}

![European Funds: Digital Poland](https://user-images.githubusercontent.com/3487289/187831797-73f8d302-7299-499e-a93a-5a977fda556d.png)

![Republic of Poland](https://user-images.githubusercontent.com/3487289/187831991-56a199a3-6d13-4414-b565-9cb28c8c3627.png)

![Polish Ministry of Culture and National Heritage](https://user-images.githubusercontent.com/3487289/187832111-9d2e5c72-0c6b-4bdb-8c3f-b692c6f4b553.png)

![European Regional Development Fund](https://user-images.githubusercontent.com/3487289/187836194-74a41748-21f7-45fa-856e-739d5aab6829.png)



Associated websites
-----------------

The main user interface for these digital scores is https://polishscores.org.
All transcriptions include links to scans of the physical scores, which are
found on the sister website https://polish.musicsources.pl .

The polishscores.org website files are located in the Github repository 
https://github.com/craigsapp/webiste-polish-scores, as well as the backend
data server files at https://github.com/craigsapp/nifc-digital-score-server . Instructions
for installing and maintaining the server and digital scores can be
found [here](https://docs.google.com/document/d/1GacdLcQktSHn2LL7uAoLlU5EelAKPKinbQK19JTCa5I).



Libraries and archives
----------------------

Here are a list archives represented in the repository.  Directory
names are based on the RISM siglum of the archive.  Click on the
archive icon in the first column to see a list of the scores at
https://polishscores.org, or click on the directory name in the
first column to see a list of the Humdrum digital transcriptions
for the given archive on Github, or click on the name of the archive
to visit its webpage.

The `Scores` column lists the number of digital transcriptions within
each archive directory, and the `Notes` column gives the number of
musical notes contained within those scores.   Currently there are
{{scorecount}} scores containing a total of {{notecount}} notes.

{{library-table}}


Source editions
---------------

All source editions for digital scores in this repository are (or wil be)
available online.  See the `URL-scan` reference records in the Humdrum
files for a link to the scanned source editions.  Here is a list of the
websites for the scanned source editions that are currently available:

{{scan-table}}


Composers
---------

{{composer-tables}}



Filenames
---------

Filenames are in the form `siglum--shelfmark--sequence_composer--title.krn`

<details markdown="1">
<summary markdown="1">

Example: `pl-kc--40102-iii-1-saf--002-052_zielenski-mikolaj--communiones-totius-anni-in-epiphania-domini-vidimus-stellam-eius.krn`

</summary>

| Component | Meaning |
| --------- | ------- |
| `pl-kc`     | RISM siglum (ID) of source archive. |
| `40102-iii-saf` | Shelfmark (call number) containing source of transcription. |
| `002-005`   | This is fifth movement/work in the second work/group in the given shelfmark. |
| `zielenski-mikolaj` | The composer's name |
| `communiones-totius-anni-in-epiphania-domini-vidimus-stellam-eius` | The composition title. |

</details>

Filenames only contains lower-case letters (a-z without accents),
numbers, dashes, underscores and dots.

The first part of the file name (siglum + shelfmark + shelfmark
enumeration) is unique and is used for data processing, while the
second part of the file name (composer + title) is for human
readability.



Reference records
-----------------

Here is a list of reference records used in the Humdrum scores and
their meanings:

{{reference-table}}



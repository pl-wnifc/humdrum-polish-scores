#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Sun May 14 08:29:58 PDT 2023
# Last Modified: Sun May 14 23:32:31 PDT 2023
# Filename:      humdrum-polish-scores/bin/makeDesic
# Syntax:        perl 5
#
# Description:   Scores in this repository stored in [rismid]/kern/*.krn are
#                diplomatically encoded but with obvious pitch errors and other
#                errors fixed.  To restre a fully diplomatic score with the
#                source-edition errors within the data, "sic -o" can be run
#                on the scores.  When a note is identified by the editors as
#                an error, they can add a !LO:SIC parameter before the note
#                (clef, key signature, etc.) which gives the corrected version
#                of the data.  For example, to add a missing sharp, this can be
#                expressed as:
#                   !LO:SIC:s=4c#
#                   4c
#                or as
#                   !LO:SIC:s=4c#y
#                   4c
#                which means encode as a c#, but do not show the sharp. "y" after
#                a feature in the token means that it is interpreted by the editor,
#                and the sharp will not be shown visually.
#
#                The data in [rismid]/kern encode the corrected tokens within
#                the data, with the original store in the SIC parameter:
#                   !LO:SIC:o=4c
#                   4c#
#                or as
#                   !LO:SIC:s=4c
#                   4c#y
#                which means that the correction is "4c#" and the original is "4c"
#                in the source edition.
#
#                This script creates a parallel directory structure [rismid]/desic
#                to store a version of the data that has the original content is
#                placed into the data, and the error correction data is stored
#                in the !LO:SIC parameter.  After running "sic -o input.krn > output.krn" the
#                data will look like this:
#                   !LO:SIC:s=4c#
#                   4c
#                where "sic -o" means to insert the original text as the new
#                token contents. This process is reversible, and "sic -s" will
#                insert the substitution token into the data.  More information
#                about the sic tool can be found at:
#                   https://doc.verovio.humdrum.org/filter/sic
#
#                Output files are placed in [rismid]/desic/*.krn.
#
#                To run this script, you need to install Humlib tools:
#                    https://github.com/craigsapp/humlib
#
#                Then run with "make desic" or "bin/makeDesic" when you are in the
#                base directory of the repository.
#

use strict;
use Getopt::Long;

my $srcdir    = "kern";
my $targetdir = "desic";
my $verboseQ  = 0;

Getopt::Long::Configure("bundling");
GetOptions (
   'v|verbose' => \$verboseQ,  # verbose mode (for debugging)
   's|source' => \$srcdir,     # source input directory (in each [rismid] directory)
   't|target' => \$targetdir   # target output directory (in each [rismid] directory)
);


# Check to see if software dependencies are set up:

my $sic = `which sic`;
chomp $sic;
if ($sic =~ /^\s*$/) {
	die "You need to install sic first (see https://github.com/craigsapp/humlib)\n";
}


my @dirs = glob("*-*/$srcdir");

foreach my $dir (@dirs) {
	processDirectory($dir);
}


###########################################################################

##############################
##
## processDirectory --
##

sub processDirectory {
	my ($dir) = @_;
	if (!-d $dir) {
		print STDERR "$dir is not a directory\n";
		return;
	}

	my @files = sort glob("$dir/*.krn");
	if (@files < 1) {
		print STDERR "$dir does not have any Humdrum files\n";
		return;
	}

	my $tdir = $dir;
	$tdir =~  s/$srcdir/$targetdir/;
	print STDERR "PREPARING DIRECTORY $tdir\n";
	`mkdir -p "$tdir"`;

	for my $file (@files) {
		my $filebase = $file;
		$filebase =~ s/.*\///;
		my $tfile = "$tdir/$filebase";
		my $command = "cat $file | $sic -o > $tfile";
		print STDERR "$command\n" if $verboseQ;
		`$command`;
	}
}



